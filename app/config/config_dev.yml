imports:
    - { resource: config.yml }

framework:
    router:
        resource: '%kernel.project_dir%/app/config/routing_dev.yml'
        strict_requirements: true
    profiler: { only_exceptions: false }

web_profiler:
    toolbar: true
    intercept_redirects: false

services:
    Monolog\Formatter\JsonFormatter: ~

monolog:
    channels: ['foo', 'queue']
    handlers:
        main:
            type:  rotating_file
            path:  '%kernel.logs_dir%/%kernel.environment%.log'
            level: debug
            # max number of log files to keep
            # defaults to zero, which means infinite files
            max_files: 10
            channels: ['!event']
        security:
            level: debug
            type: stream
            path: '%kernel.logs_dir%/event.log'
            channels: [event]
        custom:
            type:  rotating_file
            level: debug
            type: stream
            path: '%kernel.logs_dir%/foo.log'
            channels: [foo]
            formatter: Monolog\Formatter\JsonFormatter
        queue:
            level: error
            type: stream
            path: '%kernel.logs_dir%/failed_queue.log'
            channels: [queue]
            formatter: Monolog\Formatter\JsonFormatter
#        mail:
#            type: fingers_crossed
#            action_level: critical
#            handler: deduplicated
#        deduplicated:
#            type: deduplication
#            handler: swift
#        swift:
#            type:       swift_mailer
#            from_email: 'error@example.com'
#            to_email:   'chapal@inbox.ru'
#            # or list of recipients
#            # to_email:   ['dev1@example.com', 'dev2@example.com', ...]
#            subject:    'An Error Occurred! %%message%%'
#            level:      debug
#            formatter:  monolog.formatter.html
#            content_type: text/html
#        main:
#            type: stream
#            path: '%kernel.logs_dir%/%kernel.environment%.log'
#            level: debug
#            channels: ['!event']
#        console:
#            type: console
#            process_psr_3_messages: false
#            channels: ['!event', '!doctrine', '!console']
        # To follow logs in real time, execute the following command:
        # `bin/console server:log -vv`
#        server_log:
#            type: server_log
#            process_psr_3_messages: false
#            host: 127.0.0.1:9911
        # uncomment to get logging in your browser
        # you may have to allow bigger header sizes in your Web server configuration
        #firephp:
        #    type: firephp
        #    level: info
        #chromephp:
        #    type: chromephp
        #    level: info

#swiftmailer:
#    delivery_addresses: ['me@example.com']
